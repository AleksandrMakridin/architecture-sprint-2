name: sharding-repl-cache
services:

  # api
  pymongo_api:
    image: kazhem/pymongo_api:1.0.0
    container_name: pymongo_api
    depends_on:
      - redis
      - mongos_router
    restart: always    
    ports:
      - "8080:8080"
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

  # configSrv
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command: 
      [
        "--configsvr",  //запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all"
      ] 
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # router
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    depends_on: ["configSrv", "shard1_1", "shard1_2", "shard1_3", "shard2_1", "shard2_2", "shard2_3"]    
    restart: always
    ports:
      - "27020:27020"
    volumes:
      - router-data:/data/db        
    command: 
       [
        "mongos", //обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", //передача данных сервера конфигурации
        "--bind_ip_all"
        ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # redis
  redis:
    image: "redis:latest"
    container_name: redis
    restart: always 
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      #test: [ "CMD", "redis", "--eval", "db.adminCommand('ping')" ]
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  # shard1_1
  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1_1:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard1_1", //название реплики
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # shard1_2
  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard1_2:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard1_2", //название реплик
        "--bind_ip_all" // обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # shard1_3
  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard1_3:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard1_3", //название реплик
        "--bind_ip_all" // обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # shard2_1
  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2_1:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard2_1", //название реплики
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # shard2_2
  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    ports:
      - "27024:27024"
    volumes:
      - shard2_2:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard2_2", //название реплик
        "--bind_ip_all" // обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # shard2_3
  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    ports:
      - "27025:27025"
    volumes:
      - shard2_3:/data/db
    command:
      [
        "--shardsvr", //запуск в режиме шардинга
        "--replSet",
        "shard2_3", //название реплик
        "--bind_ip_all" // обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
volumes:
  config-data:
  router-data:
  redis_data:  
  shard1_1:
  shard1_2:
  shard1_3:
  shard2_1:
  shard2_2:
  shard2_3:
  
